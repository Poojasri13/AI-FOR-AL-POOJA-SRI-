from heapq import heappush, heappop

goal = '123456780'

def h(state):  # Manhattan Distance
    return sum(abs((i // 3) - (state.index(str(i)) // 3)) + abs((i % 3) - (state.index(str(i)) % 3)) for i in range(1, 9))

def get_neighbors(state):
    i = state.index('0')
    moves = []
    x, y = divmod(i, 3)
    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
        nx, ny = x+dx, y+dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            j = 3*nx + ny
            l = list(state)
            l[i], l[j] = l[j], l[i]
            moves.append(''.join(l))
    return moves

def solve(start):
    visited = set()
    pq = [(h(start), 0, start, [])]
    while pq:
        f, g, state, path = heappop(pq)
        if state == goal:
            return path + [state]
        if state in visited:
            continue
        visited.add(state)
        for neighbor in get_neighbors(state):
            if neighbor not in visited:
                heappush(pq, (g+1+h(neighbor), g+1, neighbor, path + [state]))
    return []

# Example Input
start = '125340678'  # Change this to your puzzle start state
path = solve(start)

# Output
print(f"Moves: {len(path)-1}")
for step in path:
    print('\n'.join([step[i:i+3] for i in range(0, 9, 3)]), end='\n\n')
